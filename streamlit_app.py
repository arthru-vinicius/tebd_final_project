import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from PIL import Image

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard - An√°lise de Voos 2015",
    page_icon="‚úàÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado para melhorar apar√™ncia
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #1f77b4;
    }
    .insight-box {
        background-color: #333333;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        color: #ffffff;
    }
    .insight-item {
        margin: 0.5rem 0;
        padding: 0.3rem 0;
        border-left: 3px solid #1f77b4;
        padding-left: 0.8rem;
    }
    .highlight-metric {
        background-color: #fff3cd;
        padding: 0.5rem;
        border-radius: 0.3rem;
        border-left: 3px solid #1f77b4;
        margin: 0.5rem 0;
        color: #000000;
    }
</style>
""", unsafe_allow_html=True)


# Fun√ß√£o para carregar dados com cache
@st.cache_data
def load_data():
    """
    Carrega todos os dados dos relat√≥rios e gr√°ficos
    """
    try:
        data = {}

        # Relat√≥rios
        data['relatorio_01'] = pd.read_csv('data/relatorio_01_ranking_performance_airlines.csv')
        data['relatorio_02'] = pd.read_csv('data/relatorio_02_rotas_criticas.csv')
        data['relatorio_03'] = pd.read_csv('data/relatorio_03_sazonalidade_mensal.csv')
        data['relatorio_04'] = pd.read_csv('data/relatorio_04_causas_cancelamento_atraso.csv')

        # Dados para gr√°ficos
        data['grafico_01'] = pd.read_csv('data/grafico_01_dados.csv')
        data['grafico_02'] = pd.read_csv('data/grafico_02_dados.csv')
        data['grafico_03_volumes'] = pd.read_csv('data/grafico_03_matriz_volumes.csv')
        data['grafico_03_atrasos'] = pd.read_csv('data/grafico_03_matriz_atrasos.csv')
        data['grafico_04_principais'] = pd.read_csv('data/grafico_04_causas_principais.csv')
        data['grafico_04_menores'] = pd.read_csv('data/grafico_04_causas_menores.csv')

        return data
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return None


def create_temporal_trend_chart(data):
    """
    Cria gr√°fico de tend√™ncia temporal de atrasos
    """
    df = data['grafico_01']

    # Criando subplot com eixo secund√°rio
    fig = make_subplots(specs=[[{"secondary_y": True}]])

    # Linha principal - Atraso m√©dio
    fig.add_trace(
        go.Scatter(
            x=df['month_name'],
            y=df['avg_arrival_delay'],
            mode='lines+markers',
            name='Atraso M√©dio (min)',
            line=dict(color='#ff6b6b', width=3),
            marker=dict(size=8)
        ),
        secondary_y=False,
    )

    # Linha secund√°ria - Volume de voos
    fig.add_trace(
        go.Scatter(
            x=df['month_name'],
            y=df['total_flights'] / 1000,  # Em milhares
            mode='lines+markers',
            name='Volume (milhares)',
            line=dict(color='#4ecdc4', width=2),
            marker=dict(size=6)
        ),
        secondary_y=True,
    )

    # √Årea de pontualidade
    fig.add_trace(
        go.Scatter(
            x=df['month_name'],
            y=df['on_time_rate'],
            fill='tonexty',
            mode='none',
            name='Taxa Pontualidade (%)',
            fillcolor='rgba(78, 205, 196, 0.2)'
        ),
        secondary_y=True,
    )

    # Configura√ß√µes dos eixos
    fig.update_xaxes(title_text="M√™s")
    fig.update_yaxes(title_text="Atraso M√©dio (minutos)", secondary_y=False)
    fig.update_yaxes(title_text="Volume (milhares) / Pontualidade (%)", secondary_y=True)

    fig.update_layout(
        title="Tend√™ncia Temporal de Atrasos ao Longo de 2015",
        height=500,
        hovermode='x unified'
    )

    return fig


def create_airline_performance_chart(data):
    """
    Cria gr√°fico de performance por companhia a√©rea
    """
    df = data['grafico_02'].head(12)  # Top 12

    # Definindo cores por categoria
    color_map = {
        'Excelente': '#2ecc71',
        'Boa': '#f39c12',
        'Regular': '#e67e22',
        'Ruim': '#e74c3c'
    }

    colors = [color_map.get(cat, '#95a5a6') for cat in df['performance_category']]

    fig = go.Figure(data=[
        go.Bar(
            y=df['airline_name'],
            x=df['performance_score'],
            orientation='h',
            marker_color=colors,
            text=df['performance_score'].round(1),
            textposition='outside',
            hovertemplate='<b>%{y}</b><br>' +
                          'Score: %{x:.1f}<br>' +
                          'Pontualidade: %{customdata:.1f}%<extra></extra>',
            customdata=df['on_time_rate']
        )
    ])

    fig.update_layout(
        title="Performance por Companhia A√©rea (Score de Performance)",
        xaxis_title="Score de Performance",
        yaxis_title="Companhia A√©rea",
        height=600,
        showlegend=False
    )

    return fig


def create_heatmap_chart(data):
    """
    Cria mapa de calor de atrasos por dia vs hora
    """
    df_atrasos = data['grafico_03_atrasos'].set_index('day_name')

    # Convertendo colunas para num√©rico
    for col in df_atrasos.columns:
        df_atrasos[col] = pd.to_numeric(df_atrasos[col], errors='coerce')

    fig = go.Figure(data=go.Heatmap(
        z=df_atrasos.values,
        x=[f"{i:02d}:00" for i in range(24)],
        y=df_atrasos.index,
        colorscale='RdYlBu_r',
        zmid=0,
        colorbar=dict(title="Atraso M√©dio (min)"),
        hovertemplate='<b>%{y}</b><br>' +
                      'Hora: %{x}<br>' +
                      'Atraso: %{z:.1f} min<extra></extra>'
    ))

    fig.update_layout(
        title="Mapa de Calor: Atrasos por Dia da Semana vs Hora do Dia",
        xaxis_title="Hora do Dia",
        yaxis_title="Dia da Semana",
        height=500
    )

    return fig


def create_causes_pie_chart(data):
    """
    Cria gr√°fico de pizza das causas de problemas
    """
    df = data['grafico_04_principais']

    # Cores diferenciadas por tipo
    colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57']

    fig = go.Figure(data=[go.Pie(
        labels=df['cause_name'],
        values=df['percentage'],
        hole=0.3,
        marker_colors=colors,
        textinfo='label+percent',
        textposition='outside',
        hovertemplate='<b>%{label}</b><br>' +
                      'Ocorr√™ncias: %{customdata:,}<br>' +
                      'Percentual: %{percent}<extra></extra>',
        customdata=df['total_occurrences']
    )])

    fig.update_layout(
        title="Distribui√ß√£o de Causas de Cancelamento e Atraso",
        height=500,
        showlegend=True,
        legend=dict(orientation="v", yanchor="middle", y=0.5)
    )

    return fig


# INTERFACE PRINCIPAL
def main():
    # Header principal
    st.markdown('<h1 class="main-header">‚úàÔ∏è Dashboard - An√°lise de Voos 2015</h1>',
                unsafe_allow_html=True)

    st.markdown("""
    <div style='text-align: center; margin-bottom: 2rem;'>
        <h3>Data Warehouse - T√≥picos Especiais em Banco de Dados</h3>
        <p><em>An√°lise completa de performance do setor a√©reo americano em 2015</em></p>
    </div>
    """, unsafe_allow_html=True)

    # Carregamento dos dados
    with st.spinner('Carregando dados do Data Warehouse...'):
        data = load_data()

    if data is None:
        st.error("Falha ao carregar os dados. Verifique os arquivos na pasta 'data/'.")
        return

    # Sidebar com informa√ß√µes do projeto
    st.sidebar.header("üìã Informa√ß√µes do Projeto")

    st.sidebar.markdown("""
    **Fonte dos Dados:**
    - U.S. Department of Transportation
    - Bureau of Transportation Statistics
    - Ano: 2015
    - **[üîó Link de Acesso aos Dados](https://www.kaggle.com/datasets/usdot/flight-delays?ref=hackernoon.com)**

    **Volume Analisado:**
    - 5.8+ milh√µes de voos
    - 14 companhias a√©reas
    - 7,465 rotas diferentes
    - 1.8+ milh√µes de problemas catalogados

    **Integrantes da Equipe:**
    - Arthur Rodrigues
    - Athos Lima
    - Matheus Santos
    - Rafael Luna

    **Docente:**
    - Fl√°vio Rosendo da Silva Oliveira
    """)

    # Link de acesso ao projeto
    st.sidebar.markdown("---")
    st.sidebar.markdown(
        "**[üîó Link de Acesso ao projeto no Colab](https://colab.research.google.com/drive/1K1oAjrbWChErx5YTenv3Lr5tJvm7gHnn?usp=sharing)**",
        unsafe_allow_html=True
    )

    # M√©tricas principais
    st.header("üìä M√©tricas Principais")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Total de Voos", "5.8M+", "Analisados")
    with col2:
        st.metric("Companhias", "14", "Avaliadas")
    with col3:
        st.metric("Pontualidade M√©dia", "79.0%", "‚â§ 15min atraso")
    with col4:
        st.metric("Atraso M√©dio", "4.4 min", "Chegada")

    # Tabs principais
    tab1, tab2, tab3 = st.tabs(["üìã Relat√≥rios Tabulares", "üìà An√°lises Gr√°ficas", "üîç Metodologia"])

    with tab1:
        st.header("üìã Relat√≥rios Tabulares")

        # Sub-tabs para relat√≥rios
        rel_tab1, rel_tab2, rel_tab3, rel_tab4 = st.tabs([
            "üèÜ Ranking Airlines", "üõ£Ô∏è Rotas Cr√≠ticas", "üìÖ Sazonalidade", "‚ö†Ô∏è Causas Problemas"
        ])

        with rel_tab1:
            st.subheader("üèÜ Ranking de Performance por Companhia A√©rea")

            st.markdown("""
            <div class="insight-box">
            <h4>üìà Insights Principais:</h4>
            <ul>
                <li><strong>Alaska Airlines (AS)</strong> lidera com score de 98.2</li>
                <li><strong>Spirit Airlines (NK)</strong> apresenta maior desafio (score 48.7)</li>
                <li>Diferen√ßa de <strong>49.5 pontos</strong> entre melhor e pior performance</li>
                <li>Score m√©dio do setor: <strong>72.7 pontos</strong></li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

            st.dataframe(data['relatorio_01'], use_container_width=True, height=400)

            with st.expander("üìä Metodologia do Ranking"):
                st.markdown("""
                **Metodologia de C√°lculo:**

                O ranking √© baseado em um Score de Performance que combina tr√™s componentes principais: atraso m√©dio na chegada, taxa de cancelamento (com peso multiplicado por 10) e taxa de pontualidade invertida. A f√≥rmula aplicada √©: `Score = Atraso M√©dio + (Taxa Cancelamento √ó 10) + (100 - Taxa Pontualidade)`. Quanto menor o score, melhor a performance da companhia.

                **M√©tricas Analisadas:**

                Para cada companhia a√©rea s√£o calculados: total de voos operados, taxa de pontualidade (voos com atraso igual ou inferior a 15 minutos), atraso m√©dio na chegada em minutos, taxa de cancelamento, taxa de desvio de rota e o score consolidado de performance. Voos cancelados e desviados s√£o exclu√≠dos do c√°lculo de pontualidade.

                **Crit√©rios de Avalia√ß√£o:**

                A an√°lise considera voos pontuais aqueles com atraso m√°ximo de 15 minutos na chegada, seguindo padr√µes internacionais da avia√ß√£o civil. O peso maior atribu√≠do aos cancelamentos reflete o impacto significativo desta ocorr√™ncia na experi√™ncia do passageiro. O processamento √© otimizado atrav√©s de chunks para garantir efici√™ncia computacional com grandes volumes de dados.
                """)

        with rel_tab2:
            st.subheader("üõ£Ô∏è An√°lise de Rotas Cr√≠ticas (Top 20 Piores)")

            st.markdown("""
            <div class="insight-box">
            <h4>üéØ Insights Principais:</h4>
            <ul>
                <li><strong>ASE ‚Üí DFW</strong> (Aspen-Dallas): Rota mais cr√≠tica (score 282.06)</li>
                <li><strong>Rotas com aeroportos pequenos</strong> apresentam maiores desafios</li>
                <li><strong>Condi√ß√µes geogr√°ficas</strong> impactam significativamente a performance</li>
                <li>Concentra√ß√£o de problemas em <strong>hubs espec√≠ficos</strong></li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

            st.dataframe(data['relatorio_02'], use_container_width=True, height=400)

            with st.expander("üìä Metodologia das Rotas Cr√≠ticas"):
                st.markdown("""
                **Metodologia de An√°lise:**

                A an√°lise considera todas as rotas com volume m√≠nimo de 100 voos anuais para garantir signific√¢ncia estat√≠stica. Para cada rota origem-destino s√£o calculados indicadores de performance incluindo atraso m√©dio na chegada, taxa de cancelamento, volume total de opera√ß√µes e dist√¢ncia percorrida. O ranking √© estabelecido atrav√©s de um score composto que pondera negativamente atrasos e cancelamentos.

                **Crit√©rios de Sele√ß√£o:**

                As rotas s√£o classificadas como cr√≠ticas baseando-se em m√∫ltiplos fatores de impacto operacional. O score de criticidade combina atraso m√©dio na chegada com taxa de cancelamento multiplicada por fator de peso 15, refletindo o impacto desproporcional dos cancelamentos na experi√™ncia do passageiro. Rotas com menos de 100 voos anuais s√£o exclu√≠das para evitar distor√ß√µes estat√≠sticas.

                **Enriquecimento de Dados:**

                Para cada rota cr√≠tica identificada s√£o coletadas informa√ß√µes complementares incluindo cidades de origem e destino, estados envolvidos, regi√µes geogr√°ficas e lista das companhias a√©reas que operam a conex√£o. Estes dados permitem an√°lise geogr√°fica e identifica√ß√£o de padr√µes regionais de problemas operacionais.

                **M√©tricas Calculadas:**

                O relat√≥rio apresenta para cada rota cr√≠tica o volume total de voos, atraso m√©dio na chegada em minutos, taxa de cancelamento percentual, dist√¢ncia da rota em milhas e rela√ß√£o completa das companhias que operam a conex√£o. Adicionalmente s√£o fornecidas estat√≠sticas comparativas com m√©dias nacionais para contextualiza√ß√£o dos problemas identificados.
                """)

        with rel_tab3:
            st.subheader("üìÖ Sazonalidade Detalhada - Performance Mensal")

            st.markdown("""
            <div class="insight-box">
            <h4>üå°Ô∏è Insights Sazonais:</h4>
            <ul>
                <li><strong>Fevereiro</strong>: M√™s mais cr√≠tico (score 82.1)</li>
                <li><strong>Abril</strong>: Melhor performance (score 29.87)</li>
                <li><strong>Ver√£o</strong>: Maior volume, performance moderada</li>
                <li><strong>Inverno</strong>: Menor volume, maiores desafios clim√°ticos</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

            st.dataframe(data['relatorio_03'], use_container_width=True, height=400)

            with st.expander("üìä Metodologia da Sazonalidade"):
                st.markdown("""
                **Metodologia de An√°lise Temporal:**

                A an√°lise considera todos os voos realizados em 2015 agrupados por m√™s, calculando m√©tricas consolidadas de performance para cada per√≠odo. S√£o analisados indicadores de volume operacional, pontualidade, atrasos m√©dios, cancelamentos e principais causas de problemas operacionais. A metodologia permite identifica√ß√£o de meses cr√≠ticos e per√≠odos de melhor performance.

                **M√©tricas de Sazonalidade:**

                Para cada m√™s s√£o calculados o volume total de voos operados, quantidade de voos pontuais dentro do crit√©rio de 15 minutos, total de voos atrasados, voos cancelados e atraso m√©dio na chegada. Adicionalmente s√£o identificadas as principais causas de atraso por per√≠odo, permitindo an√°lise detalhada dos fatores sazonais que impactam a opera√ß√£o.

                **An√°lise de Causas Temporais:**

                O relat√≥rio detalha a distribui√ß√£o mensal dos diferentes tipos de atraso incluindo problemas de sistema a√©reo, quest√µes meteorol√≥gicas, problemas das companhias a√©reas, atrasos de aeronaves e quest√µes de seguran√ßa. Esta segmenta√ß√£o permite identificar quais fatores s√£o mais prevalentes em determinados per√≠odos do ano.

                **Identifica√ß√£o de Padr√µes C√≠clicos:**

                A an√°lise temporal revela padr√µes recorrentes relacionados a feriados, condi√ß√µes clim√°ticas sazonais, per√≠odos de alta demanda tur√≠stica e varia√ß√µes operacionais t√≠picas da avia√ß√£o comercial. Estes insights s√£o fundamentais para planejamento de capacidade e estrat√©gias de mitiga√ß√£o de problemas sazonais.
                """)

        with rel_tab4:
            st.subheader("‚ö†Ô∏è An√°lise Detalhada de Causas de Cancelamento e Atraso")

            st.markdown("""
            <div class="insight-box">
            <h4>üîç Insights das Causas:</h4>
            <ul>
                <li><strong>Aeronave Atrasada</strong>: Principal causa (30.1% dos casos)</li>
                <li><strong>Causas Control√°veis</strong>: 60.9% dos problemas</li>
                <li><strong>Impacto M√©dio</strong>: 38.4 minutos por atraso</li>
                <li><strong>Oportunidade</strong>: Foco em causas control√°veis para melhoria</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)

            st.dataframe(data['relatorio_04'], use_container_width=True, height=400)

            with st.expander("üìä Metodologia das Causas"):
                st.markdown("""
                **Metodologia de Categoriza√ß√£o:**

                A an√°lise segmenta os problemas operacionais em duas categorias principais: cancelamentos e atrasos. Para cancelamentos s√£o analisadas as causas codificadas pelo sistema DOT incluindo problemas de companhia a√©rea, condi√ß√µes meteorol√≥gicas, sistema a√©reo nacional e quest√µes de seguran√ßa. Para atrasos s√£o quantificados os diferentes tipos de delay com seus respectivos impactos temporais.

                **Quantifica√ß√£o de Impactos:**

                Para cada tipo de problema s√£o calculadas m√©tricas de frequ√™ncia absoluta, percentual do total de ocorr√™ncias, impacto m√©dio em minutos de atraso e identifica√ß√£o dos meses com maior incid√™ncia. Esta abordagem permite prioriza√ß√£o de a√ß√µes corretivas baseada em impacto real na opera√ß√£o e experi√™ncia do passageiro.

                **An√°lise Temporal de Causas:**

                O relat√≥rio identifica padr√µes sazonais nas diferentes causas de problemas, revelando quais fatores s√£o mais prevalentes em determinados per√≠odos do ano. Esta an√°lise temporal √© fundamental para planejamento preventivo e aloca√ß√£o de recursos para mitiga√ß√£o de problemas recorrentes.

                **Segmenta√ß√£o por Severidade:**

                Os problemas s√£o categorizados por n√≠veis de severidade baseados no impacto operacional, permitindo foco em causas que geram maior disru√ß√£o. Cancelamentos recebem peso maior devido ao impacto total na experi√™ncia do passageiro, enquanto atrasos s√£o ponderados pela dura√ß√£o m√©dia do impacto.
                """)

    with tab2:
        st.header("üìà An√°lises Gr√°ficas Interativas")

        # Gr√°fico 1: Tend√™ncia Temporal
        st.subheader("üìä 1. Tend√™ncia Temporal de Atrasos ao Longo do Ano")

        col1, col2 = st.columns([3, 1])
        with col1:
            fig1 = create_temporal_trend_chart(data)
            st.plotly_chart(fig1, use_container_width=True)

        with col2:
            st.markdown("""
            ### üîç **Insights Principais:**
            """)

            st.markdown("""
            <div class="insight-item">
            <strong>üìà Padr√£o Sazonal Cr√≠tico:</strong><br>
            Janeiro, Fevereiro, Junho, Julho e Dezembro apresentam atrasos significativamente maiores
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="highlight-metric">
            <strong>üéØ Insight Chave:</strong><br>
            Volume varia pouco (~10%), mas atrasos variam drasticamente (at√© 1000%)
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            **üå°Ô∏è Causas Identificadas:**
            - **Inverno** (Jan/Fev/Dez): Condi√ß√µes clim√°ticas adversas
            - **Ver√£o** (Jun/Jul): Pico de demanda tur√≠stica
            - **Abril/Maio**: Condi√ß√µes ideais (clima + demanda)

            **üí° Recomenda√ß√£o:**
            Ajuste de capacidade e recursos nos meses cr√≠ticos
            """)

        st.markdown("---")

        # Gr√°fico 2: Performance Companhias
        st.subheader("üèÜ 2. Performance por Companhia A√©rea")

        col1, col2 = st.columns([3, 1])
        with col1:
            fig2 = create_airline_performance_chart(data)
            st.plotly_chart(fig2, use_container_width=True)

        with col2:
            st.markdown("""
            ### üéØ **Categoriza√ß√£o:**
            """)

            st.markdown("""
            <div class="insight-item">
            üü¢ <strong>Excelente (‚â•80):</strong><br>
            AS, DL, HA - Opera√ß√µes focadas e eficientes
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="insight-item">
            üü† <strong>Boa (70-79):</strong><br>
            UA, US, VX, AA - Performance s√≥lida
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="insight-item">
            üî¥ <strong>Desafios (<60):</strong><br>
            F9, NK - Necessitam melhorias estruturais
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            **üìä Diferencial Competitivo:**
            - **49.5 pontos** entre melhor e pior
            - **Alaska Airlines**: Benchmark do setor
            - **Oportunidade**: Grandes varia√ß√µes indicam potencial de melhoria
            """)

        st.markdown("---")

        # Gr√°fico 3: Mapa de Calor
        st.subheader("üå°Ô∏è 3. Mapa de Calor - Atrasos por Dia vs Hora")

        col1, col2 = st.columns([3, 1])
        with col1:
            fig3 = create_heatmap_chart(data)
            st.plotly_chart(fig3, use_container_width=True)

        with col2:
            st.markdown("""
            ### ‚è∞ **Padr√µes Temporais:**
            """)

            st.markdown("""
            <div class="insight-item">
            <strong>üåÖ Manh√£ (06-12h):</strong><br>
            Melhor per√≠odo - opera√ß√µes "limpas"
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="insight-item">
            <strong>üåÜ Tarde/Noite (18-23h):</strong><br>
            Per√≠odo cr√≠tico - efeito cascata
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="highlight-metric">
            <strong>üìà Efeito Cascata:</strong><br>
            Atrasos se acumulam ao longo do dia
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            **üéØ Aplica√ß√µes Pr√°ticas:**
            - **Pricing din√¢mico**: Hor√°rios premium vs econ√¥micos
            - **Aloca√ß√£o de recursos**: Refor√ßo em per√≠odos cr√≠ticos
            - **Planejamento**: Slots estrat√©gicos para voos importantes
            """)

        st.markdown("---")

        # Gr√°fico 4: Distribui√ß√£o de Causas
        st.subheader("ü•ß 4. Distribui√ß√£o de Causas de Cancelamento e Atraso")

        col1, col2 = st.columns([3, 1])
        with col1:
            fig4 = create_causes_pie_chart(data)
            st.plotly_chart(fig4, use_container_width=True)

        with col2:
            st.markdown("""
            ### üéØ **Prioriza√ß√£o de A√ß√µes:**
            """)

            st.markdown("""
            <div class="insight-item">
            <strong>1Ô∏è‚É£ Aeronave Atrasada (30.1%):</strong><br>
            Gest√£o de frota e manuten√ß√£o preventiva
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="insight-item">
            <strong>2Ô∏è‚É£ Problemas Companhia (30.8%):</strong><br>
            Otimiza√ß√£o de processos internos
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="highlight-metric">
            <strong>üí∞ ROI Potencial:</strong><br>
            60.9% das causas s√£o control√°veis
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            **üöÄ Estrat√©gia Recomendada:**
            - **Foco no Top 3**: 91.4% do impacto total
            - **Quick Wins**: Causas control√°veis primeiro
            - **Investimento**: Tecnologia e processos
            """)

    with tab3:
        st.header("üîç Metodologia e Documenta√ß√£o T√©cnica")

        st.markdown("""
        ## üèóÔ∏è Arquitetura do Data Warehouse

        ### Modelagem Dimensional (Esquema Estrela)
        - **Tabela Fato**: `fact_flights` (5.8M+ registros)
        - **Dimens√µes**: `dim_airline`, `dim_airport`, `dim_date`, `dim_flight_status`, `dim_cancellation_reason`

        ### Processo ETL
        1. **Extra√ß√£o**: Dados brutos do DOT (CSV)
        2. **Transforma√ß√£o**: Limpeza, padroniza√ß√£o, c√°lculos derivados
        3. **Carga**: Estrutura dimensional otimizada

        ## üìä M√©tricas e C√°lculos

        ### Score de Performance (Airlines)
        ```
        Score = Atraso_M√©dio + (Taxa_Cancelamento √ó 10) + (100 - Taxa_Pontualidade)
        ```

        ### Score de Criticidade (Rotas)
        ```
        Score = Atraso_M√©dio + (Taxa_Cancelamento √ó 15)
        ```

        ### Defini√ß√µes Operacionais
        - **Voo Pontual**: Atraso ‚â§ 15 minutos
        - **Atraso Significativo**: > 15 minutos
        - **Volume M√≠nimo**: 100 voos/ano para an√°lise de rotas

        ## üéØ Aplica√ß√µes Pr√°ticas

        ### Para Companhias A√©reas
        - Benchmarking de performance
        - Identifica√ß√£o de oportunidades de melhoria
        - Planejamento de investimentos

        ### Para Aeroportos
        - Otimiza√ß√£o de slots
        - Gest√£o de recursos por hor√°rio
        - Planejamento de capacidade

        ### Para Passageiros
        - Escolha de companhias
        - Planejamento de viagens
        - Expectativas realistas
        """)

        st.info("""
        üí° **Nota T√©cnica**: Este dashboard foi desenvolvido como parte do projeto de 
        T√≥picos Especiais em Banco de Dados, demonstrando a aplica√ß√£o pr√°tica de 
        conceitos de Data Warehouse, modelagem dimensional e an√°lise de dados.
        """)


if __name__ == "__main__":
    main()